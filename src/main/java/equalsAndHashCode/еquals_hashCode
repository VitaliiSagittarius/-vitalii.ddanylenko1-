Метод еquals() используется для сравнения объектов, а hashCode - для генерации целочисленного кода объекта.

Реализация по умолчанию метода equals() в классе java.lang.Object сравнивает ссылки на адреса в памяти, которые хранят переменные,
и возвращает true только в том случае, если адреса совпадают, другими словами переменные ссылаются на один и тот же объект.


Так как HashMap и HashTable в Java полагаются на методы equals() и hashCode() для сравнения своих key и values,
то Java предлагает следующие правила для переопределения этих методов:
1. Рефлексивность: Объект должен равняться себе самому.
2. Симметричность: если a.equals(b) возвращает true, то b.equals(a) должен тоже вернуть true.
3. Транзитивность: если a.equals(b) возвращает true и b.equals(c) тоже возвращает true, то c.equals(a) тоже должен возвращать true.
4. Согласованность: повторный вызов метода equals() должен возвращать одно и тоже значение до тех пор,
пока какое-либо значение свойств объекта не будет изменено. То есть, если два объекта равны в Java, то они будут равны пока их свойства остаются неизменными.
5. Сравнение null: объект должны быть проверен на null. Если объект равен null, то метод должен вернуть false,
а не NullPointerException. Например, a.equals(null) должен вернуть false.

Рефлексивность — x.equals(x) возвращает true.
Симметричность — x.equals(y) <=> y.equals(x).
Транзитивность — x.equals(y) <=> y.equals(z) <=> x.equals(z).
Согласованность — повторный вызов x.equals(y) должен возвращать значение предыдущего вызова, если сравниваемые поля не изменялись.
Сравнение null — x.equals(null) возвращает false.


Соглашение между equals и hashCode в Java
1. Если объекты равны по результатам выполнения метода equals, тогда их hashcode должны быть одинаковыми.
2. Если объекты не равны по результатам выполнения метода equals, тогда их hashcode могут быть как одинаковыми, так и разными.
Однако для повышения производительности, лучше, чтобы разные объекты возвращали разные коды.